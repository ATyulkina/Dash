from utils.data_loader import load_data
import plotly.graph_objects as go
from dash import Input, Output, html
from datetime import datetime

def register_callbacks(app):

    @app.callback(    # –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
           Output('air-quality-output', 'children'),
           Output('co-graph', 'figure'),
           Output('no2-graph', 'figure'),
           Output('o3-graph', 'figure'),
           Output('so2-graph', 'figure'),
           Output('pm2_5-graph', 'figure'),
           Output('pm10-graph', 'figure'),
           Input('city-input', 'value')
    ) 
    def update_dashboard(city):
        data = load_data(city)

        air_quality_info = html.Div([
            # html.H4(f'{data['city_name']}'),
            html.H4(f'{datetime.strptime(data['day'], '%Y-%m-%d').strftime('%d.%m.%Y')} üå≥ {data['city_name']}'),
            html.Br(),
            html.H5(f'CO - {data['co']} –º–∫–≥/–º¬≥'),
            html.H5(f'NO‚ÇÇ - {data['no2']} –º–∫–≥/–º¬≥'),
            html.H5(f'O‚ÇÉ - {data['o3']} –º–∫–≥/–º¬≥'),
            html.H5(f'SO‚ÇÇ - {data['so2']} –º–∫–≥/–º¬≥'),
            html.H5(f'PM2.5 - {data['pm2_5']} –º–∫–≥/–º¬≥'),
            html.H5(f'PM10 - {data['pm10']} –º–∫–≥/–º¬≥'),
            html.H5(f'–ò–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ US EPA - {data['us_epa_index']}'),
            html.H5(f'–ò–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ UK DEFRA - {data['gb_defra_index']}')
        ])

        co_fig = go.Figure(
            data=go.Scatter(x=data['hour'], y=data['co_hour'], mode='lines+markers'),
            layout=go.Layout(title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è CO –ø–æ —á–∞—Å–∞–º', xaxis_title='–í—Ä–µ–º—è', yaxis_title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (–º–∫–≥/–º¬≥)', template='gridon')
        )
        
        no2_fig = go.Figure(
            data=go.Scatter(x=data['hour'], y=data['no2_hour'], mode='lines+markers'),
            layout=go.Layout(title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è NO‚ÇÇ –ø–æ —á–∞—Å–∞–º', xaxis_title='–í—Ä–µ–º—è', yaxis_title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (–º–∫–≥/–º¬≥)', template='gridon')
        )

        o3_fig = go.Figure(
            data=[go.Scatter(x=data['hour'], y=data['o3_hour'], mode='lines+markers')],
            layout=go.Layout(title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è O‚ÇÉ –ø–æ —á–∞—Å–∞–º', xaxis_title='–í—Ä–µ–º—è', yaxis_title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (–º–∫–≥/–º¬≥)', template='gridon')
        )

        so2_fig = go.Figure(
            data=[go.Scatter(x=data['hour'], y=data['so2_hour'], mode='lines+markers')],
            layout=go.Layout(title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è SO‚ÇÇ –ø–æ —á–∞—Å–∞–º', xaxis_title='–í—Ä–µ–º—è', yaxis_title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (–º–∫–≥/–º¬≥)', template='gridon')
        )

        pm2_5_fig = go.Figure(
            data=[go.Scatter(x=data['hour'], y=data['pm2_5_hour'], mode='lines+markers')],
            layout=go.Layout(title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è PM2.5 –ø–æ —á–∞—Å–∞–º', xaxis_title='–í—Ä–µ–º—è', yaxis_title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (–º–∫–≥/–º¬≥)', template='gridon')
        )

        pm10_fig = go.Figure(
            data=[go.Scatter(x=data['hour'], y=data['pm10_hour'], mode='lines+markers')],
            layout=go.Layout(title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è PM10 –ø–æ —á–∞—Å–∞–º', xaxis_title='–í—Ä–µ–º—è', yaxis_title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (–º–∫–≥/–º¬≥)', template='gridon')
        )
        
        return air_quality_info, co_fig, no2_fig, o3_fig, so2_fig, pm2_5_fig, pm10_fig
